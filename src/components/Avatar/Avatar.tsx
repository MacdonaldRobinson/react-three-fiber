/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 .\public\models\avatar.glb 
*/

import React, { useEffect, useRef } from "react";
import { useFrame, useGraph } from "@react-three/fiber";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { useControls } from "leva";
import * as THREE from "three";

export function Avatar({ onReady, ...props }) {
    const { headFollow, cursorFollow, wireframe } = useControls({
        headFollow: false,
        cursorFollow: false,
        wireframe: false,
    });
    const { animation } = props;

    const groupRef = useRef();
    const { scene } = useGLTF("models/avatar.glb");
    const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
    const { nodes, materials } = useGraph(clone);

    const { animations: typingAnimation } = useFBX("animations/Typing.fbx");
    typingAnimation[0].name = "Typing";

    const { animations: standingAnimation } = useFBX("animations/Idle.fbx");
    standingAnimation[0].name = "Standing";

    const { animations: fallingAnimation } = useFBX(
        "animations/Falling Idle.fbx"
    );
    fallingAnimation[0].name = "Falling";

    const { actions } = useAnimations(
        [typingAnimation[0], standingAnimation[0], fallingAnimation[0]],
        groupRef
    );

    useEffect(() => {
        if (onReady) {
            onReady(groupRef);
        }
    }, [groupRef, onReady]);

    useEffect(() => {
        if (!groupRef.current) return;
        groupRef.current.traverse((child) => {
            if (child.isMesh || child.isSkinnedMesh) {
                child.castShadow = true; // lets this mesh cast shadows
                child.receiveShadow = true; // optional: lets it receive shadows
            }
        });
    }, []);

    useEffect(() => {
        actions[animation]?.reset().fadeIn(0.5).play();
        return () => {
            actions[animation]?.reset().fadeOut(0.5).play();
        };
    }, [actions, animation]);

    useEffect(() => {
        Object.values(materials).forEach((material) => {
            material.wireframe = wireframe;
        });
    }, [wireframe]);

    useFrame((state) => {
        if (headFollow) {
            groupRef.current
                .getObjectByName("Head")
                .lookAt(state.camera.position);
        }

        if (cursorFollow) {
            const target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1);

            //console.log(target);
            groupRef.current.getObjectByName("Head").lookAt(target);
        }
    });

    return (
        <group {...props} dispose={null} ref={groupRef} position={[0, -1, 0]}>
            <primitive object={nodes.Hips} />
            <skinnedMesh
                geometry={nodes.Wolf3D_Hair.geometry}
                material={materials.Wolf3D_Hair}
                skeleton={nodes.Wolf3D_Hair.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Top.geometry}
                material={materials.Wolf3D_Outfit_Top}
                skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
                material={materials.Wolf3D_Outfit_Bottom}
                skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
                material={materials.Wolf3D_Outfit_Footwear}
                skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Body.geometry}
                material={materials.Wolf3D_Body}
                skeleton={nodes.Wolf3D_Body.skeleton}
            />
            <skinnedMesh
                name="EyeLeft"
                geometry={nodes.EyeLeft.geometry}
                material={materials.Wolf3D_Eye}
                skeleton={nodes.EyeLeft.skeleton}
                morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
                morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
            />
            <skinnedMesh
                name="EyeRight"
                geometry={nodes.EyeRight.geometry}
                material={materials.Wolf3D_Eye}
                skeleton={nodes.EyeRight.skeleton}
                morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
                morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Head"
                geometry={nodes.Wolf3D_Head.geometry}
                material={materials.Wolf3D_Skin}
                skeleton={nodes.Wolf3D_Head.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Teeth"
                geometry={nodes.Wolf3D_Teeth.geometry}
                material={materials.Wolf3D_Teeth}
                skeleton={nodes.Wolf3D_Teeth.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
            />
        </group>
    );
}

useGLTF.preload("models/avatar.glb");
